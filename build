#!/bin/bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

error() {
  echo " !     $*" >&2
  exit 1
}

warning() {
  echo " !     $*"
}

status() {
  echo "-----> $*"
}

# sed -l basically makes sed replace and buffer through stdin to stdout
# so you get updates while the command runs and dont wait for the end
# e.g. npm install | indent
indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

message() {
  echo "$*" | indent
}


status "Builders running..."

if [[ -d "/app" ]]; then
  cd "/app"
else
  error 'Error: No app found'
  exit 1
fi

# default build variables
BUILD_NPM_UPDATE=0

BUILD_BOWER=1
BUILD_BOWER_PRUNE=1
BUILD_BOWER_INSTALL=1
BUILD_BOWER_UPDATE=0
BUILD_BOWER_CACHE=1
BUILD_BOWER_COMPONENTS="bower_components"

BUILD_COMPASS=0
BUILD_COMPASS_CACHE=1

BUILD_GRUNT=1
BUILD_GULP=1

# read config
if [[ -f "./.builders" ]]; then
  status 'Reading builders file'
  source ./.builders
elif [[ -f "./.dokkubuild" ]]; then
  warning '.dokkubuild file is deprecated, use .builders instead'
  status 'Reading old builders file'
  source ./.dokkubuild
fi

# internal variables
BUILDERS_CACHE="/builders-cache"
BUILDERS_DIR="."

PATH="$PATH:/app/vendor/node/bin"
if [[ "x$(which npm)" == "x" ]]; then
  new_path="$(find / -name npm | grep -v /tmp | grep -v node_modules | tail -1 | xargs -I % sh -c "dirname %")" &&
  PATH="$PATH:$new_path"
fi
PATH="$PATH:$(npm bin)"

# env rules
if [[ -f "./.profile.d/app-env.sh" ]]; then
  status 'Running app-env.sh'
  . ./.profile.d/app-env.sh
fi

# npm
if [[ $BUILD_NPM_UPDATE -eq 1 ]]; then
  status 'Updating npm packages'
  npm update
fi

# bower
if [[ $BUILD_BOWER -eq 1 ]]; then
  if [[ -f "./bower.json" ]]; then
    status 'Fetching bower components'
    if [[ ! -f "./node_modules/bower/bin/bower" ]]; then
      npm install bower
    fi
    if [[ $BUILD_BOWER_CACHE -eq 1 && -f $BUILDERS_CACHE/bower_components.tar.gz ]]; then
      status "Restoring $BUILD_BOWER_COMPONENTS from cache"
      mv $BUILDERS_CACHE/bower_components.tar.gz .
      gunzip bower_components.tar.gz
      tar xf bower_components.tar
      rm bower_components.tar
    fi

    if [[ $BUILD_BOWER_PRUNE -eq 1 ]]; then
      status 'Pruning cached components not specified in bower.json'
      bower prune --allow-root --config.interactive=false
    fi

    if [[ $BUILD_BOWER_INSTALL -eq 1 ]]; then
      status 'Installing bower components'
      bower install --allow-root --config.interactive=false
    fi

    if [[ $BUILD_BOWER_UPDATE -eq 1 ]]; then
      status 'Updating bower components'
      bower update --allow-root --config.interactive=false
    fi

    status "Caching $BUILD_BOWER_COMPONENTS directory"
    tar czf bower_components.tar.gz "$BUILD_BOWER_COMPONENTS"
    mv bower_components.tar.gz $BUILDERS_CACHE/
  else
    status 'Bower setup skipped: No bower.json file found.'
  fi
fi

# compass via bundle
if [[ $BUILD_COMPASS -eq 1 ]]; then
  if [[ -f "./Gemfile" ]]; then
    (
      # Install compass
      status "Running Compass compile task"
      export GEM_HOME=$BUILDERS_DIR/.gem/ruby/1.9.1
      PATH="$GEM_HOME/bin:$PATH"
      if [[ $BUILD_COMPASS_CACHE -eq 1 && -d $BUILDERS_CACHE/ruby/.gem ]]; then
        status "Restoring gems from cache"
        cp -r $BUILDERS_CACHE/ruby/.gem $BUILDERS_DIR
        HOME=$BUILDERS_DIR gem update bundler --user-install --no-rdoc --no-ri 2>&1 | indent
      else
        HOME=$BUILDERS_DIR gem install bundler --user-install --no-rdoc --no-ri 2>&1 | indent
      fi

      # Run bundler
      HOME=$BUILDERS_DIR bundle install 2>&1 | indent

      # Run compass
      HOME=$BUILDERS_DIR bundle exec compass compile
    )
    # cache ruby gems
    rm -rf $BUILDERS_CACHE/ruby
    mkdir -p $BUILDERS_CACHE/ruby

    # If app has a gems directory, cache it.
    if test -d $BUILDERS_DIR/.gem; then
      status "Caching gems for future builds"
      cp -r $BUILDERS_DIR/.gem $BUILDERS_CACHE/ruby
    fi
  else
    message 'Compass setup skipped: No Gemfile file found.'
  fi
fi

# grunt
if [[ $BUILD_GRUNT -eq 1 ]]; then
  status 'Running Grunt build task'
  if [[ -f "./Gruntfile.js" || -f "./Gruntfile.coffee" || -f "./grunt.js" ]]; then
    if [[ ! -f "./node_modules/grunt-cli/bin/grunt" ]]; then
      npm install grunt-cli
    fi
    grunt build
  else
    message 'Gruntfile build skipped: No Gruntfile.js/coffee file found.'
  fi
fi

# gulp
if [[ $BUILD_GULP -eq 1 ]]; then
  status 'Running Gulp build task'
  if [[ -f "./gulpfile.js" || -f "./gulpfile.coffee" || -f "./gulp.js" ]]; then
    if [[ ! -f "./node_modules/gulp/bin/gulp" ]]; then
      npm install gulp
    fi
    gulp build
  else
    message 'Gulp build skipped: No gulpfile.js/coffee file found.'
  fi
fi